#include "arduino_secrets.h"

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1f3cc705-6823-4c31-abbd-f061203eae45 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String mesaj;
  CloudLight led;
  CloudTemperatureSensor temperature;
  CloudSchedule orar;
  bool afiseazaMesaj;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "base64.h"
#include <time.h>
#include <EEPROM.h>

#define ADC_REF_VOLTAGE 5.0    // refference voltage 5V

const int buttonPin = 4;
const int ledPin = 2;

// variables for connecting to mail server
const char* smtp_server = "mail.smtp2go.com"; // sau smtp.smtp2go.com
const int smtp_port = 2525; // sau 587 sau 465

// variables for saving into EEPROM
int adreseMesaje[10];
int adreseDate[10];
int lungimeAdr = 30;
int indexMsg = 0;
int indexData = 0;

WiFiClient client;

void setupAdrese(){
  const int adrM0 = 0;
  adreseMesaje[0] = adrM0;
  const int adrM1 = adrM0 + lungimeAdr;
  adreseMesaje[1] = adrM1;
  const int adrM2 = adrM1 + lungimeAdr;
  adreseMesaje[2] = adrM2;
  const int adrM3 = adrM2 + lungimeAdr;
  adreseMesaje[3] = adrM3;
  const int adrM4 = adrM3 + lungimeAdr;
  adreseMesaje[4] = adrM4;
  const int adrM5 = adrM4 + lungimeAdr;
  adreseMesaje[5] = adrM5;
  const int adrM6 = adrM5 + lungimeAdr;
  adreseMesaje[6] = adrM6;
  const int adrM7 = adrM6 + lungimeAdr;
  adreseMesaje[7] = adrM7;
  const int adrM8 = adrM7 + lungimeAdr;
  adreseMesaje[8] = adrM8;
  const int adrM9 = adrM8 + lungimeAdr;
  adreseMesaje[9] = adrM9;

  const int adrD0 = adrM9 + lungimeAdr;
  adreseDate[0] = adrD0;
  const int adrD1 = adrD0 + lungimeAdr;
  adreseDate[1] = adrD1;
  const int adrD2 = adrD1 + lungimeAdr;
  adreseDate[2] = adrD2;
  const int adrD3 = adrD2 + lungimeAdr;
  adreseDate[3] = adrD3;
  const int adrD4 = adrD3 + lungimeAdr;
  adreseDate[4] = adrD4;
  const int adrD5 = adrD4 + lungimeAdr;
  adreseDate[5] = adrD5;
  const int adrD6 = adrD5 + lungimeAdr;
  adreseDate[6] = adrD6;
  const int adrD7 = adrD6 + lungimeAdr;
  adreseDate[7] = adrD7;
  const int adrD8 = adrD7 + lungimeAdr;
  adreseDate[8] = adrD8;
  const int adrD9 = adrD8 + lungimeAdr;
  adreseDate[9] = adrD9;
}

void salvareMesaje(String mesaj){
   int adresa = adreseMesaje[indexMsg];
  for (int i = 0; i < mesaj.length() && i < lungimeAdr; i++) {
    EEPROM.write(adresa + i, mesaj[i]);
  }
  EEPROM.write(adresa + mesaj.length(), '\0');  // terminator
  indexMsg++;

  if (indexMsg >= 9)
    indexMsg = 0;
}

void salvareDate(char data[30]){
   int adresa = adreseDate[indexData];
  for (int i = 0; i < lungimeAdr; i++) {
    EEPROM.write(adresa + i, data[i]);
  }
  EEPROM.write(adresa + 30, '\0');  // terminator
  indexData++;

  if (indexData >= 9)
    indexData = 0;
}

void sendEmail() {
  if (client.connect(smtp_server, smtp_port)) {
    Serial.println("Conectat la SMTP server");

    // FuncÈie helper localÄ ca sÄ citeÈti tot ce trimite serverul
    auto readSmtpResponse = []() {
    unsigned long timeout = millis() + 5000;
    while (!client.available() && millis() < timeout) delay(10);
    while (client.available()) {
      String line = client.readStringUntil('\n');
      Serial.println(line);
      if (line.startsWith("250 ") || line.startsWith("235 ") || line.startsWith("354") || line.startsWith("221") || line.startsWith("530") || line == "") {
        break;
      }
    }
    };

    client.println("EHLO arduino");
    readSmtpResponse();

    client.println("AUTH LOGIN");
    readSmtpResponse();

    client.println(base64::encode("PS NAN2"));  // username base64
    readSmtpResponse();

    client.println(base64::encode("254uEt6db5Z2ZKXo"));  // password base64
    readSmtpResponse();

    client.println("MAIL FROM:<adelin.sima@student.upt.ro>");
    readSmtpResponse();

    client.println("RCPT TO:<pichler.gabriel2@gmail.com>");
    readSmtpResponse();

    client.println("DATA");
    readSmtpResponse();

    // Trimiterea conÈinutului emailului
    client.println("Subject: Umiditate detectata");
    client.println("From: Arduino <adelin.sima@student.upt.ro>");
    client.println("To: viorel.pichler@student.upt.ro");
    client.println("Content-Type: text/plain; charset=utf-8");
    client.println("");  // Linie goalÄ Ã®ntre header Èi body
    client.println("Oh, no!");
    client.println("Dispozitivul instalat in locuinta dumneavoastra a detectat umiditate!");
    client.println("Va rugam sa luati masuri urgente pentru a preveni eventuale daune.");
    client.println("");
    client.println("- Adelin si Gabi.");
    client.println(".");

    readSmtpResponse();  // AÈteaptÄ rÄspuns dupÄ trimiterea corpului

    client.println("QUIT");
    readSmtpResponse();  // AÈteaptÄ confirmare Ã®nchidere

    Serial.println("Email trimis!");
  } else {
    Serial.println("Conectare esuata la SMTP.");
  }

  client.stop();
}

double read_temperature() {
  //CiteÈte valoarea analogicÄ de la senzor
  float sensorValue = analogRead(A0);
  // CalculeazÄ tensiunea pe baza valorii citite
  float voltage = sensorValue * (ADC_REF_VOLTAGE / 16384.0);
  //transformare din tensiune in grade celsius
  double temperature = voltage * 1000.0;

  // Aproximare temperatura afisata din 0.5 in 0.5 grade
  if ((temperature - (int)temperature) > 0.7)
    return (int)temperature + 1;
  else if ((temperature - (int)temperature) > 0.3)
    return (int)temperature + 0.5;
  else return (int)temperature;
}

void humidity_sensor(){
  if (digitalRead(buttonPin) == 1){
    Serial.println("Umiditate detectata!");
    Serial.print("Data si ora: ");

    unsigned long epochTime = ArduinoCloud.getLocalTime();  // timestamp (secunde de la 1970)
    if (epochTime == 0) {
      Serial.println("Ora nu este sincronizata.");
      return;
    }

    time_t rawTime = epochTime;
    struct tm *timeinfo = localtime(&rawTime);
  
    char buffer[30];
    strftime(buffer, sizeof(buffer), "%d.%m.%Y %H:%M:%S", timeinfo);
    Serial.println(buffer);
    salvareDate(buffer);
    
    sendEmail();
  }
}

void checkSchedule(){
  if (orar.isActive()) {
    digitalWrite(ledPin, HIGH);  // aprinde becul
  } else {
    digitalWrite(ledPin, LOW);   // stinge becul
  }
}

void turnLED(){
  if (led == 1){
    digitalWrite(ledPin, HIGH);
  }
}

void sendMessage(){
  if(afiseazaMesaj){
    Serial.print("Mesaj: ");
    Serial.println(mesaj);
    salvareMesaje(mesaj);
    mesaj = "";
    afiseazaMesaj = false;
  }
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT);
  digitalWrite(buttonPin, LOW);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  setupAdrese();
}

void loop() {
  ArduinoCloud.update();
  
  temperature = read_temperature();
  
  humidity_sensor();
  checkSchedule();
  turnLED();
  sendMessage();
}

void onLedChange()  {
  if (led == 1){
    Serial.println("LED ON");
  }
  else{
    Serial.println("LED OFF");
    digitalWrite(ledPin, LOW);
  }
}

void onOrarChange()  {
  Serial.println("Orarul a fost actualizat.");
}

void onMesajChange(){}

void onAfiseazaMesajChange() {}